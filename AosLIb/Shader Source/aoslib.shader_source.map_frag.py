# uncompyle6 version 3.9.0
# Python bytecode version base 2.7 (62211)
# Decompiled from: Python 3.9.0 (tags/v3.9.0:9cf6752, Oct  5 2020, 15:34:40) [MSC v.1927 64 bit (AMD64)]
# Embedded file name: C:\TeamCity\buildAgent\work\dc8eb0b1d2cf198a\Main\client\standalone\build\pyi.win32\run_obfuscated\out00-PYZ.pyz\aoslib.shader_source.map_frag
map_frag = '\n#version 110\n\n#define DETAIL_LEVEL 3\n\n#define USE_NOISE 1\n\nuniform float alpha;\n\n#define saturate(x) clamp(x, 0.0, 1.0)\n\n#if DETAIL_LEVEL > 0\n\nuniform float ambientFactor;\n\nvarying vec2 aoTexCoord;\nvarying vec2 edgeTexCoord;\nvarying vec2 noiseTexCoord;\n\nvarying vec3 normal;\n\nuniform sampler2D aotexture;\n\nvarying float dir_light_influence;\n\nvec3 calculate_lighting(vec3 theColor, vec3 theLightDir, vec3 theHalfVec, vec3 theLightCol, vec3 theNormal, \n                        float fresnelAngle, float specPow, float specStrength)\n{\n    vec3 colorResult = theColor;\n    \n    // diffuse\n    float fresnel = max(fresnelAngle, dot(theNormal, theLightDir));\n\n    colorResult.rgb *= (fresnel * theLightCol);\n\n    // specular\n    float specular = max(0.0, dot(theNormal, theHalfVec));\n\n    colorResult.rgb += (pow(specular,specPow) * specStrength * theLightCol);\n\n    return mix(colorResult, theColor, dir_light_influence);\n}\n\n#endif\n\nvoid main()\n{\n    vec4 color = vec4(gl_Color.rgb, alpha);\n#if DETAIL_LEVEL > 0\n    // calculate lighting for our key directional light\n    vec3 L = normalize(gl_LightSource[0].position.xyz);\n    vec3 H = normalize(gl_LightSource[0].halfVector.xyz);\n\n    // calculate lighting for our back directional light\n    vec3 L2 = normalize(gl_LightSource[1].position.xyz);\n    vec3 H2 = normalize(gl_LightSource[1].halfVector.xyz);\n    \n    vec3 N = normalize(normal);\n\n    vec3 colDir1 = calculate_lighting(gl_Color.rgb, L, H, gl_LightSource[0].diffuse.rgb, N, 0.3, 10.0, 0.065);\n    vec3 colDir2 = calculate_lighting(gl_Color.rgb, L2, H2, gl_LightSource[1].diffuse.rgb, N, 0.3, 10.0, 0.065);\n\n    vec3 lightAmbient = gl_LightSource[0].ambient.rgb * gl_LightSource[0].ambient.a;\n    vec3 lightColorLerp = saturate(lightAmbient + colDir1 + colDir2);\n\n    // do our AO\n    color.rgb = lightColorLerp * (texture2D(aotexture, aoTexCoord).r + 0.35);\t\n\n    // top quad highlighting\n    color.rgb += (((1.0 - texture2D(aotexture, edgeTexCoord).g) * gl_Color.rgb) * 0.3);\n\n    // noise\n    float noise_tex = texture2D(aotexture, noiseTexCoord).b;\n\n    color.rgb *= noise_tex;\n\n    color.rgb = mix(gl_Fog.color.rgb, color.rgb, saturate((gl_Fog.end - gl_FogFragCoord) * gl_Fog.scale));\n\n    gl_FragColor = vec4(color.rgb, clamp(((gl_Fog.end - gl_FogFragCoord) * gl_Fog.scale*20.0), 0.0, 1.0));\n#endif\n    gl_FragColor = color;\n}\n'
# okay decompiling out\aoslib.shader_source.map_frag.pyc
