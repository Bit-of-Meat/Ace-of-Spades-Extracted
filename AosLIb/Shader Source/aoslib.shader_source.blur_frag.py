# uncompyle6 version 3.9.0
# Python bytecode version base 2.7 (62211)
# Decompiled from: Python 3.9.0 (tags/v3.9.0:9cf6752, Oct  5 2020, 15:34:40) [MSC v.1927 64 bit (AMD64)]
# Embedded file name: C:\TeamCity\buildAgent\work\dc8eb0b1d2cf198a\Main\client\standalone\build\pyi.win32\run_obfuscated\out00-PYZ.pyz\aoslib.shader_source.blur_frag
blur_frag = '\n#version 110\n\n// select blur type here ->\n#define HORIZONTAL_BLUR_9\n\nuniform float sigma;     // The sigma value for the gaussian function: higher value means more blur\n                         // A good value for 9x9 is around 3 to 5\n                         // A good value for 7x7 is around 2.5 to 4\n                         // A good value for 5x5 is around 2 to 3.5\n                         // ... play around with this based on what you need :)\n\nuniform float blurSize;  // This should usually be equal to\n                         // 1.0 / texture_pixel_width for a horizontal blur, and\n                         // 1.0 / texture_pixel_height for a vertical blur.\n\nuniform sampler2D blurSampler;  // Texture that will be blurred by this shader\n\nconst float pi = 3.14159265;\n\n// The following are all mutually exclusive macros for various \n// seperable blurs of varying kernel size\n#if defined(VERTICAL_BLUR_9)\nconst float numBlurPixelsPerSide = 4.0;\nconst vec2  blurMultiplyVec      = vec2(0.0, 1.0);\n#elif defined(HORIZONTAL_BLUR_9)\nconst float numBlurPixelsPerSide = 4.0;\nconst vec2  blurMultiplyVec      = vec2(1.0, 0.0);\n#elif defined(VERTICAL_BLUR_7)\nconst float numBlurPixelsPerSide = 3.0;\nconst vec2  blurMultiplyVec      = vec2(0.0, 1.0);\n#elif defined(HORIZONTAL_BLUR_7)\nconst float numBlurPixelsPerSide = 3.0;\nconst vec2  blurMultiplyVec      = vec2(1.0, 0.0);\n#elif defined(VERTICAL_BLUR_5)\nconst float numBlurPixelsPerSide = 2.0;\nconst vec2  blurMultiplyVec      = vec2(0.0, 1.0);\n#elif defined(HORIZONTAL_BLUR_5)\nconst float numBlurPixelsPerSide = 2.0;\nconst vec2  blurMultiplyVec      = vec2(1.0, 0.0);\n#else\n// This only exists to get this shader to compile when no macros are defined\nconst float numBlurPixelsPerSide = 0.0;\nconst vec2  blurMultiplyVec      = vec2(0.0, 0.0);\n#endif\n\nvoid main() {\n\n  // Incremental Gaussian Coefficent Calculation (See GPU Gems 3 pp. 877 - 889)\n  vec3 incrementalGaussian;\n  incrementalGaussian.x = 1.0 / (sqrt(2.0 * pi) * sigma);\n  incrementalGaussian.y = exp(-0.5 / (sigma * sigma));\n  incrementalGaussian.z = incrementalGaussian.y * incrementalGaussian.y;\n\n  vec4 avgValue = vec4(0.0, 0.0, 0.0, 0.0);\n  float coefficientSum = 0.0;\n\n  // Take the central sample first...\n  avgValue += texture2D(blurSampler, gl_TexCoord[0].xy) * incrementalGaussian.x;\n  coefficientSum += incrementalGaussian.x;\n  incrementalGaussian.xy *= incrementalGaussian.yz;\n\n  // Go through the remaining 8 vertical samples (4 on each side of the center)\n  for (float i = 1.0; i <= numBlurPixelsPerSide; i++) { \n    avgValue += texture2D(blurSampler, gl_TexCoord[0].xy - i * blurSize * \n                          blurMultiplyVec) * incrementalGaussian.x;         \n    avgValue += texture2D(blurSampler, gl_TexCoord[0].xy + i * blurSize * \n                          blurMultiplyVec) * incrementalGaussian.x;         \n    coefficientSum += 2.0 * incrementalGaussian.x;\n    incrementalGaussian.xy *= incrementalGaussian.yz;\n  }\n\n  gl_FragColor = avgValue / coefficientSum;\n  gl_FragColor.a *= gl_Color.a;\n}\n'
# okay decompiling out\aoslib.shader_source.blur_frag.pyc
